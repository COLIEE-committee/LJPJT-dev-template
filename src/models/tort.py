from dataclasses import asdict, dataclass
from typing import Any, TypeVar

from src.models._util import dict_factory
from src.models.defendant_claim import DefendantClaim
from src.models.plaintiff_claim import PlaintiffClaim
from src.models.undisputed_fact import UndisputedFact

_Tort = TypeVar("_Tort", bound="Tort")


@dataclass
class Tort:
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Tort - a model defined in OpenAPI

        version: The version of this Tort.
        tort_id: The tort_id of this Tort.
        undisputed_facts: The undisputed_facts of this Tort.
        plaintiff_claims: The plaintiff_claims of this Tort.
        defendant_claims: The defendant_claims of this Tort.
        court_decision: The court_decision of this Tort.
    """

    version: str
    tort_id: str
    undisputed_facts: list[UndisputedFact]
    plaintiff_claims: list[PlaintiffClaim]
    defendant_claims: list[DefendantClaim]
    court_decision: bool | None

    @classmethod
    def from_dict(cls: type[_Tort], input: dict[str, Any]) -> _Tort:
        return cls(
            version=input["version"],
            tort_id=input["tort_id"],
            undisputed_facts=[UndisputedFact.from_dict(v) for v in input["undisputed_facts"]],
            plaintiff_claims=[PlaintiffClaim.from_dict(v) for v in input["plaintiff_claims"]],
            defendant_claims=[DefendantClaim.from_dict(v) for v in input["defendant_claims"]],
            court_decision=input["court_decision"],
        )

    def to_dict(self) -> dict[str, Any]:
        return asdict(self, dict_factory=dict_factory)
